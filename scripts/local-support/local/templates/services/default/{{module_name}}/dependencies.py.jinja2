import contextlib
import logging
from typing import AsyncIterator, cast

import fastapi

import async_workers

from {{ module_name }} import config, database, workers

logger = logging.getLogger(__name__)


@contextlib.asynccontextmanager
async def lifespan(app: fastapi.FastAPI, settings: config.Settings) -> AsyncIterator[None]:
    app.state.settings = settings  # noqa

    dependencies = {
        "storage": database.storage.Storage.from_settings(settings.database),
    }
    async with contextlib.AsyncExitStack() as stack:
        for name, dependency in dependencies.items():
            await stack.enter_async_context(dependency)
            setattr(app.state, name, dependency)  # noqa
        await stack.enter_async_context(async_workers.WorkersLifespan(workers, **dependencies))
        yield


def get_settings(request: fastapi.Request) -> config.Settings:
    return cast(config.Settings, request.app.state.settings)


def get_storage(request: fastapi.Request) -> database.storage.Storage:
    return cast(database.storage.Storage, request.app.state.storage)
